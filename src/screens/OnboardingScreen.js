import React, { useState, useRef } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  Dimensions,
  SafeAreaView,
  StatusBar,
  Animated,
  PanResponder,
} from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { Ionicons } from '@expo/vector-icons';

const { width: SCREEN_WIDTH } = Dimensions.get('window');

const slides = [
  {
    id: 1,
    title: 'üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º',
    description: '–£—á–µ—Ç –∑–∞–ø—á–∞—Å—Ç–µ–π —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏, —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞–º–∏ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π –ø–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º. –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏.',
    icon: 'üì¶',
    color: '#667eea',
  },
  {
    id: 2, 
    title: 'üîß –†–µ–º–æ–Ω—Ç—ã —Ç–µ—Ö–Ω–∏–∫–∏',
    description: '–í–µ–¥–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–º–æ–Ω—Ç–æ–≤, –Ω–∞–∑–Ω–∞—á–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—á–∞—Å—Ç–∏ –∏ —Å—á–∏—Ç–∞–π—Ç–µ –∑–∞—Ç—Ä–∞—Ç—ã.',
    icon: 'üîß',
    color: '#f093fb',
  },
  {
    id: 3,
    title: 'üìä –û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞', 
    description: '–§–æ—Ä–º–∏—Ä—É–π—Ç–µ –∫—Ä–∞—Å–∏–≤—ã–µ PDF –æ—Ç—á–µ—Ç—ã –ø–æ –ª—é–±—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã.',
    icon: 'üìä',
    color: '#4facfe',
  },
  {
    id: 4,
    title: 'üë• –ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
    description: '–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ —Ä–æ–ª–∏ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è. –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ!',
    icon: 'üë•',
    color: '#43e97b',
  }
];

export default function OnboardingScreen({ navigation }) {
  const [currentIndex, setCurrentIndex] = useState(0);
  const translateX = useRef(new Animated.Value(0)).current;

  const panResponder = useRef(
    PanResponder.create({
      onMoveShouldSetPanResponder: (evt, gestureState) => {
        return Math.abs(gestureState.dx) > Math.abs(gestureState.dy);
      },
      onPanResponderMove: (evt, gestureState) => {
        translateX.setValue(gestureState.dx);
      },
      onPanResponderRelease: (evt, gestureState) => {
        if (Math.abs(gestureState.dx) > SCREEN_WIDTH * 0.3) {
          if (gestureState.dx > 0 && currentIndex > 0) {
            goToPrevious();
          } else if (gestureState.dx < 0 && currentIndex < slides.length - 1) {
            goToNext();
          } else {
            resetPosition();
          }
        } else {
          resetPosition();
        }
      },
    })
  ).current;

  const resetPosition = () => {
    Animated.spring(translateX, {
      toValue: 0,
      useNativeDriver: true,
    }).start();
  };

  const goToNext = () => {
    if (currentIndex < slides.length - 1) {
      Animated.spring(translateX, {
        toValue: -SCREEN_WIDTH,
        useNativeDriver: true,
      }).start(() => {
        setCurrentIndex(currentIndex + 1);
        translateX.setValue(0);
      });
    }
  };

  const goToPrevious = () => {
    if (currentIndex > 0) {
      Animated.spring(translateX, {
        toValue: SCREEN_WIDTH,
        useNativeDriver: true,
      }).start(() => {
        setCurrentIndex(currentIndex - 1);
        translateX.setValue(0);
      });
    }
  };

  const handleStart = () => {
    navigation.replace('Main');
  };

  const handleSkip = () => {
    navigation.replace('Main');
  };

  const currentSlide = slides[currentIndex];

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="light-content" backgroundColor={currentSlide.color} />
      
      <LinearGradient
        colors={[currentSlide.color, `${currentSlide.color}dd`]}
        style={styles.gradient}
      >
        {/* Skip –∫–Ω–æ–ø–∫–∞ */}
        <TouchableOpacity style={styles.skipButton} onPress={handleSkip}>
          <Text style={styles.skipText}>–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å</Text>
        </TouchableOpacity>

        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
        <View style={styles.content} {...panResponder.panHandlers}>
          <Animated.View 
            style={[
              styles.slideContainer,
              { transform: [{ translateX }] }
            ]}
          >
            <View style={styles.iconContainer}>
              <Text style={styles.slideIcon}>{currentSlide.icon}</Text>
            </View>
            
            <Text style={styles.slideTitle}>{currentSlide.title}</Text>
            <Text style={styles.slideDescription}>{currentSlide.description}</Text>
          </Animated.View>
        </View>

        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã */}
        <View style={styles.indicators}>
          {slides.map((_, index) => (
            <View
              key={index}
              style={[
                styles.indicator,
                index === currentIndex && styles.activeIndicator
              ]}
            />
          ))}
        </View>

        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
        <View style={styles.navigation}>
          {currentIndex > 0 && (
            <TouchableOpacity style={styles.navButton} onPress={goToPrevious}>
              <Ionicons name="arrow-back" size={24} color="white" />
              <Text style={styles.navText}>–ù–∞–∑–∞–¥</Text>
            </TouchableOpacity>
          )}
          
          <View style={styles.navSpacer} />
          
          {currentIndex < slides.length - 1 ? (
            <TouchableOpacity style={styles.navButton} onPress={goToNext}>
              <Text style={styles.navText}>–î–∞–ª–µ–µ</Text>
              <Ionicons name="arrow-forward" size={24} color="white" />
            </TouchableOpacity>
          ) : (
            <TouchableOpacity style={styles.startButton} onPress={handleStart}>
              <Text style={styles.startButtonText}>–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É üöÄ</Text>
            </TouchableOpacity>
          )}
        </View>

        {/* –°–≤–∞–π–ø –ø–æ–¥—Å–∫–∞–∑–∫–∞ (—Ç–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–≤–æ–º —Å–ª–∞–π–¥–µ) */}
        {currentIndex === 0 && (
          <View style={styles.swipeHint}>
            <Text style={styles.swipeHintText}>‚Üê –°–≤–∞–π–ø–Ω–∏—Ç–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ ‚Üí</Text>
          </View>
        )}
      </LinearGradient>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  gradient: {
    flex: 1,
  },
  skipButton: {
    position: 'absolute',
    top: 50,
    right: 20,
    zIndex: 10,
    paddingHorizontal: 15,
    paddingVertical: 8,
    borderRadius: 20,
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
  },
  skipText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '500',
  },
  content: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 40,
  },
  slideContainer: {
    alignItems: 'center',
    width: SCREEN_WIDTH - 80,
  },
  iconContainer: {
    width: 120,
    height: 120,
    borderRadius: 60,
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 40,
  },
  slideIcon: {
    fontSize: 60,
  },
  slideTitle: {
    fontSize: 28,
    fontWeight: 'bold',
    color: 'white',
    textAlign: 'center',
    marginBottom: 20,
  },
  slideDescription: {
    fontSize: 16,
    color: 'rgba(255, 255, 255, 0.9)',
    textAlign: 'center',
    lineHeight: 24,
  },
  indicators: {
    flexDirection: 'row',
    justifyContent: 'center',
    marginBottom: 30,
  },
  indicator: {
    width: 8,
    height: 8,
    borderRadius: 4,
    backgroundColor: 'rgba(255, 255, 255, 0.3)',
    marginHorizontal: 4,
  },
  activeIndicator: {
    backgroundColor: 'white',
    width: 20,
  },
  navigation: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 30,
    paddingBottom: 40,
  },
  navButton: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 10,
  },
  navText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '500',
    marginHorizontal: 8,
  },
  navSpacer: {
    flex: 1,
  },
  startButton: {
    backgroundColor: 'white',
    paddingHorizontal: 30,
    paddingVertical: 15,
    borderRadius: 25,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 3.84,
    elevation: 5,
  },
  startButtonText: {
    fontSize: 18,
    fontWeight: '600',
    color: '#333',
  },
  swipeHint: {
    position: 'absolute',
    bottom: 100,
    left: 0,
    right: 0,
    alignItems: 'center',
  },
  swipeHintText: {
    color: 'rgba(255, 255, 255, 0.7)',
    fontSize: 14,
    textAlign: 'center',
  },
});