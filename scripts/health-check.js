#!/usr/bin/env node

/**
 * Health check script –¥–ª—è Timeweb Cloud Apps
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
 */

require('dotenv').config();
const db = require('../config/database');

async function healthCheck() {
  console.log('üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...');
    await db.raw('SELECT 1');
    console.log('‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
    console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    const tables = await db.raw(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
    `);
    
    const expectedTables = [
      'companies', 'users', 'refresh_tokens', 'email_verifications',
      'containers', 'equipment', 'parts', 'transactions',
      'staff', 'repairs', 'repair_parts', 'repair_staff',
      'files', 'report_history'
    ];
    
    const existingTables = tables.rows.map(row => row.table_name);
    const missingTables = expectedTables.filter(table => !existingTables.includes(table));
    
    if (missingTables.length > 0) {
      console.log('‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã:', missingTables.join(', '));
      console.log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run migrate');
    } else {
      console.log('‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
    const requiredEnvVars = [
      'DATABASE_URL',
      'JWT_SECRET',
      'JWT_REFRESH_SECRET'
    ];
    
    const missingEnvVars = requiredEnvVars.filter(envVar => !process.env[envVar]);
    
    if (missingEnvVars.length > 0) {
      console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:', missingEnvVars.join(', '));
      process.exit(1);
    } else {
      console.log('‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ S3 (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if (process.env.S3_ENDPOINT) {
      console.log('‚òÅÔ∏è  S3 –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ:', process.env.S3_ENDPOINT);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ SMTP (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if (process.env.SMTP_HOST) {
      console.log('üìß SMTP –Ω–∞—Å—Ç—Ä–æ–µ–Ω:', process.env.SMTP_HOST);
    }
    
    console.log('üéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!');
    process.exit(0);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
if (require.main === module) {
  healthCheck();
}

module.exports = healthCheck;